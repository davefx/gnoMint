AC_PREREQ(2.52)

AC_INIT(gnomint, 0.5.3)

PACKAGE="gnoMint"
PACKAGE_BUGREPORT="<davefx@gmail.com>"
PACKAGE_NAME="gnomint"
PACKAGE_VERSION="0.5.3"
PACKAGE_COPYRIGHT="(c) 2006,2007,2008 David Marín Carreño <davefx@gmail.com>"
PACKAGE_WEBSITE="http://gnomint.sourceforge.net"

AC_SUBST(PACKAGE)
AC_SUBST(PACKAGE_BUGREPORT)
AC_SUBST(PACKAGE_NAME)
AC_SUBST(PACKAGE_VERSION)
AC_SUBST(PACKAGE_COPYRIGHT)
AC_SUBST(PACKAGE_WEBSITE)

AM_INIT_AUTOMAKE([1.9 foreign])

AC_CONFIG_MACRO_DIR([m4])
dnl Put the ACLOCAL flags in the Makefile
AC_SUBST([ACLOCAL_AMFLAGS], ["-I $ac_macro_dir \${ACLOCAL_FLAGS}"])

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

# Check for programs
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_DISABLE_STATIC
AM_PROG_LIBTOOL
AM_PROG_CC_C_O

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([libintl.h locale.h stdlib.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_C_VOLATILE

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([memset strcasecmp strdup])

# gettext stuff
GETTEXT_PACKAGE=gnomint
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")
AC_DEFINE_UNQUOTED(BONOBO_EXPLICIT_TRANSLATION_DOMAIN, "gnomint")
ALL_LINGUAS="cs es fr"
AM_GLIB_GNU_GETTEXT
AC_PROG_INTLTOOL([0.23])

# Set PACKAGE_LOCALE_DIR.
gnomintlocaledir='${prefix:-${ac_default_prefix}}/${DATADIRNAME}/locale'
AC_SUBST(gnomintlocaledir)

# required versions
GNUTLS_REQUIRED=2.0
SQLITE_REQUIRED=3.0
GLIB_REQUIRED=2.6.0
GCONF_REQUIRED=2.0
GTK_REQUIRED=2.10.0
LIBGNOMEUI_REQUIRED=2.0
LIBGLADE_REQUIRED=2.5.0

# check for gnutls
AM_PATH_LIBGNUTLS([$GNUTLS_REQUIRED])
AC_SUBST(LIBGNUTLS_CFLAGS)
AC_SUBST(LIBGNUTLS_LIBS)

# check for sqlite
PKG_CHECK_MODULES(SQLITE, sqlite3 >= $SQLITE_REQUIRED)
AC_SUBST(SQLITE_CFLAGS)
AC_SUBST(SQLITE_LIBS)

dnl 
dnl gtk-doc
dnl 
AM_CONDITIONAL(GTK_DOC_USE_LIBTOOL, test -n "$LIBTOOL")
AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AC_SUBST(HAVE_GTK_DOC)
                                                                                                                     
dnl AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc        Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)
                                                                                                                     
dnl if test x$enable_gtk_doc = xauto ; then
dnl    if test x$GTKDOC = xtrue ; then
dnl       enable_gtk_doc=yes
dnl    else
dnl       enable_gtk_doc=no
dnl    fi
dnl fi

dnl AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)


dnl
dnl glib-genmarshal
dnl
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

if test "x$GCC" = "xyes"; then
	CFLAGS="-Wall -Werror -g " 
fi

dnl
dnl Scrollkeeper
dnl
AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
   AC_MSG_WARN(Couldn't find scrollkeeper-config -- please install the scrollkeeper package)
else
   SCROLLKEEPER_LOCALSTATE_DIR=`scrollkeeper-config --pkglocalstatedir`
   AC_SUBST(SCROLLKEEPER_LOCALSTATE_DIR)
fi

AM_CONDITIONAL(HAVE_SCROLLKEEPER, test x$SCROLLKEEPER_CONFIG != xno)

PKG_CHECK_MODULES(GNOMINT, 
	glib-2.0 >= $GLIB_REQUIRED \
	gconf-2.0 >= $GCONF_REQUIRED \
	gtk+-2.0 >= $GTK_REQUIRED \
	gdk-pixbuf-2.0 \
	libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED \
	libglade-2.0 >= $LIBGLADE_REQUIRED
)
AC_SUBST(GNOMINT_CFLAGS)
AC_SUBST(GNOMINT_LIBS)

dnl
dnl Check if src should be build with the debug mode
dnl
AC_ARG_ENABLE(debug, 
	[  --enable-debug          debug [default=no]],
	use_debug="Yes";
	AC_DEFINE(debug), use_debug="No")



dnl
dnl Check if src should be build with the debug_signals mode
dnl
AC_ARG_ENABLE(debug-signal, 
	[  --enable-debug-signal   debug signals sent [default=no]],
	use_debug_sig="Yes";
	AC_DEFINE(debug_signal), use_debug_sig="No")


dnl The following conditional is set in AM_GCONF_SOURCE_2.
dnl Because we may skip its execution, we have to set a default here.
m4_pattern_allow([^AM_GCONF_SOURCE_2$])
AM_CONDITIONAL([GCONF_SCHEMAS_INSTALL], [false])

GCONFTOOL=""
AC_CHECK_PROG(GCONFTOOL, gconftool-2, gconftool-2)
if test x"$GCONFTOOL" = x; then
	AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi
AM_GCONF_SOURCE_2


dnl
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([
Makefile
src/Makefile
m4/Makefile
gui/Makefile
po/Makefile.in
mime/Makefile
gconf/Makefile
gnomint.spec
])

dnl
dnl Print a little note
dnl
echo "

Configure summary:

	Source code location .......: ${srcdir}
	Compiler ...................: ${CC}
	Compiler flags .............: ${CFLAGS}
	Installing into prefix .....: ${prefix}
	ALL_LINGUAS ................: ${ALL_LINGUAS}

Type make to build ${PACKAGE_STRING}

"
